mkdir ~/HelloWorld.md
## This is a markdown file
install.packages("swirl
install.packages("swirl")
install.packages("swirl")
library("swirl")
swirl()
setwd("~/Documents/DATA SCIENTIST/Projects/MIT Course/Logistic Regression/Predicting Loans Repayment & Risk")
loans = read.csv("loans.csv")
str(loans)
summary(loans)
as.numeric(table(loans$not.fully.paid)/nrow(loans))
library(VIM)
library("VIM")
install.packages("mice")
vars.for.imputation = setdiff(names(loans), "not.fully.paid")
imputed = complete(mice(loans[vars.for.imputation]))
set.seed(1)
imputed = complete(mice(loans[vars.for.imputation]))
imputed = irmi(loans[vars.for.imputation])
imputed = complete(mice(loans[vars.for.imputation]))
load(VIM)
library(VIM)
load(MICE)
load(mice)
load("mice"")
load("mice")
library(mice)
imputed = complete(mice(loans[vars.for.imputation]))
loans[vars.for.imputation] = imputed
library("caTools")
set.seed(1)
split = sample.split(loans$not.fully.paid, SplitRatio=0.7)
split
loansTrain = subset(loans, split == TRUE)
loansTest = subset(loans, split == FALSE)
model1= glm(not.fully.paid ~., data = loansTrain, family = "binomial")
summary(model1)
pred = predict (model1,data=loans.Test, type = "response")
summary(pred)
tapply(pred,pred$not.fully.paid, mean)
tapply(pred,loansTrain$not.fully.paid, mean)
pred = predict (model1,newdata=loans.Test, type = "response")
pred = predict (model1,newdata=loansTest, type = "response")
pred1 = predict (model1,newdata=loansTest, type = "response")
tapply(pred1,loansTrain$not.fully.paid, mean)
pred2 = predict (model1,newdata=loansTest, type = "response")
pred2 = predict (model1,loansTest, type = "response")
setwd("~/Documents/DATA SCIENTIST/Projects/MIT Course/Logistic Regression/Predicting Loans Repayment & Risk")
loans = read.csv("loans.csv")
str(loans)
library(mice)
set.seed(1)
vars.for.imputation = setdiff(names(loans), "not.fully.paid")
imputed = complete(mice(loans[vars.for.imputation]))
loans[vars.for.imputation] = imputed
library(caTools)
set.seed(1)
split = sample.split(loans$not.fully.paid, SplitRatio = 0.7)
train = subset(loans, split == TRUE)
test = subset(loans, split = FALSE)
model = glm(not.fully.paid ~., data = train, family = "binomial")
summary(model)
pred = predict(model, test, type = "response")
test = subset(loans, split == FALSE)
pred = predict(model, test, type = "response")
loans <- read.csv("loans.csv")
table(loans$not.fully.paid)
summary(loans)
sum(is.na(loans))
missing = subset(loans, is.na(log.annual.inc)|is.na(days.with.cr.line)|is.na(revol.util)|is.na(inq.last.6mths)|is.na(deling.2yrs)|is.na(pub.rec))
missing = subset(loans, is.na(log.annual.inc)|is.na(days.with.cr.line)|is.na(revol.util)|is.na(inq.last.6mths)|is.na(delinq.2yrs)|is.na(pub.rec))
table(missing$not.fully.paid)
loans_imputed = read.csv("loans_imputed.csv")
set.seed(144)
library(caTools)
split = sample.split(loans_imputed$not.fully.paid, SplitRatio = 0.7)
train = subset(loans_imputed, split == T)
test = subset(loans_imputed, split == F)
model = glm(not.fully.paid~., data = train, family = binomial)
summary(model))
summary(model)
pred = predict(model, type = 'response', newdata = test)
summary(pred)
tapply(pred, train$not.fully.paid, mean)
table(test$not.fully.paid, test$pred > 0.5)
test$pred = pred
table(test$not.fully.paid, test$pred > 0.5)
table(test$not.fully.paid)
library("ROCR")
ROCRpred = prediction(pred, train$not.fullt.paid)
ROCRpred = prediction(pred, test$not.fullt.paid)
ROCRpred = prediction(test$pred, test$not.fullt.paid)
ROCRpred <- prediction(test$pred,test$not.fully.paid)
ROCRpred = prediction(test$pred,test$not.fully.paid)
as.number(performance(ROCRpred, "auc")@y.values)
as.numberic(performance(ROCRpred, "auc")@y.values)
as.numeric(performance(ROCRpred, "auc")@y.values)
plot(ROCRpred)
ROCRperf = performance(ROCRpred, "tpr", "fpr")
plot(ROCRperf)
model1 = glm(not.fully.paid ~ int.rate, data = train, family = binomial)
summary(model1)
setwd("~/Documents/DATA SCIENTIST/Projects/MIT Course/Logistic Regression/Predicting Loans Repayment & Risk")
pred = predict(model, type = 'response', newdata = test)
summary(pred)
test$pred = pred
table(test$not.fully.paid, test$pred > 0.5)
table(test$not.fully.paid)
library("ROCR")
ROCRpred = prediction(test$pred,test$not.fully.paid)
as.numeric(performance(ROCRpred, "auc")@y.values)
plot(ROCRpred)
setwd("~/Documents/DATA SCIENTIST/Projects/MIT Course/Logistic Regression/Parole")
parole = read.csv("parole.csv")
str(parole)
table(parole$violator)
library(caTools)
set.seed(144)
split = sample.split(parole$violator, SplitRatio = 0.7)
train = subset(parole, split == T)
test = subset(parole, split = F)
train$state = as.factor(train$state)
train$crime = as.factor(train$crime)
model = glm(violator ~., data = train, family = binomial)
summary(model)
# Creating data frame of the individual and then predict the probability of this individual is a violator
theMan = data.frame(row.names = 1)
theMan$male = 1
theMan$mrace = 1
theMan$age = 1
theMan$state = as.factor(1)
theMan$time.served = 3
theMan$max.sentence = 12
theMan$multiple.offenses = 0
theMan$crime = as.factor(2)
theMan$violator = NA
# Probability of this individual is violator
prob = predict(model, newdata = theMan, type = "response")
theMan$race = 1
prob = predict(model, newdata = theMan, type = "response")
prob
# Evaluate the model on the testing set
test$crime = as.factor(test$crime)
test$state = as.factor(test$state)
# Predicting the model on test set
pred = predict(model, newdata = test, type = "response")"
pred = predict(model, newdata = test, type = "response")
table(test$violator, pred > 0.5)
test = subset(parole, split == F)
pred = predict(model, newdata = test, type = "response")
test$crime = as.factor(test$crime)
test$state = as.factor(test$state)
pred = predict(model, newdata = test, type = "response")
table(test$violator, pred > 0.5)
# model's accuracy
179/202
table(test$violator, pred > 0.7)
table(test$violator, pred > 0.3)
# we should decrease the threshold as it will decrease the cases that people get violate but we predict not violate.
# Using ROCR to find AUC value
library(ROCR)
ROCRpred = prediction (pred, test$violator))
ROCRpred = prediction (pred, test$violator)
as.numeric(performance(ROCRpred, "auc")@y.values)
plot(ROCRpred)
ROCRperf = performance(ROCRpred, "tpr", "fpr")
plot(ROCRperf)
str(parole)
plot(ROCRperf)
source('~/Documents/DATA SCIENTIST/Projects/MIT Course/Logistic Regression/Parole/parole.R')
source('~/Documents/DATA SCIENTIST/Projects/MIT Course/Logistic Regression/Parole/parole.R', echo=TRUE)
setwd("~/Documents/DATA SCIENTIST/Projects/MIT Course/Logistic Regression/Songs")
setwd("~/Documents/DATA SCIENTIST/Projects/MIT Course/Logistic Regression/Songs")
songs = read.csv
source('~/Documents/DATA SCIENTIST/Projects/MIT Course/Logistic Regression/Songs/Songs.R', echo=TRUE)
source('~/Documents/DATA SCIENTIST/Projects/MIT Course/Logistic Regression/Songs/Songs.R', echo=TRUE)
source('~/Documents/DATA SCIENTIST/Projects/MIT Course/Logistic Regression/Songs/Songs.R', echo=TRUE)
source('~/Documents/DATA SCIENTIST/Projects/MIT Course/Logistic Regression/Songs/Songs.R', echo=TRUE)
source('~/Documents/DATA SCIENTIST/Projects/MIT Course/Logistic Regression/Songs/Songs.R', echo=TRUE)
source('~/Documents/DATA SCIENTIST/Projects/MIT Course/Logistic Regression/Songs/Songs.R', echo=TRUE)
source('~/Documents/DATA SCIENTIST/Projects/MIT Course/Logistic Regression/Songs/Songs.R', echo=TRUE)
source('~/Documents/DATA SCIENTIST/Projects/MIT Course/Logistic Regression/Songs/Songs.R', echo=TRUE)
source('~/Documents/DATA SCIENTIST/Projects/MIT Course/Logistic Regression/Songs/Songs.R', echo=TRUE)
source('~/Documents/DATA SCIENTIST/Projects/MIT Course/Logistic Regression/Songs/Songs.R', echo=TRUE)
source('~/Documents/DATA SCIENTIST/Projects/MIT Course/Logistic Regression/Songs/Songs.R', echo=TRUE)
source('~/Documents/DATA SCIENTIST/Projects/MIT Course/Logistic Regression/Songs/Songs.R', echo=TRUE)
source('~/Documents/DATA SCIENTIST/Projects/MIT Course/Logistic Regression/Songs/Songs.R', echo=TRUE)
source('~/Documents/DATA SCIENTIST/Projects/MIT Course/Logistic Regression/Songs/Songs.R', echo=TRUE)
source('~/Documents/DATA SCIENTIST/Projects/MIT Course/Logistic Regression/Songs/Songs.R', echo=TRUE)
source('~/Documents/DATA SCIENTIST/Projects/MIT Course/Logistic Regression/Songs/Songs.R', echo=TRUE)
source('~/Documents/DATA SCIENTIST/Projects/MIT Course/Logistic Regression/Songs/Songs.R', echo=TRUE)
source('~/Documents/DATA SCIENTIST/Projects/MIT Course/Logistic Regression/Songs/Songs.R', echo=TRUE)
source('~/Documents/DATA SCIENTIST/Projects/MIT Course/Logistic Regression/Songs/Songs.R', echo=TRUE)
source('~/Documents/DATA SCIENTIST/Projects/MIT Course/Logistic Regression/Songs/Songs.R', echo=TRUE)
source('~/Documents/DATA SCIENTIST/Projects/MIT Course/Logistic Regression/Songs/Songs.R', echo=TRUE)
source('~/Documents/DATA SCIENTIST/Projects/MIT Course/Logistic Regression/Songs/Songs.R', echo=TRUE)
source('~/Documents/DATA SCIENTIST/Projects/MIT Course/Logistic Regression/Songs/Songs.R', echo=TRUE)
source('~/Documents/DATA SCIENTIST/Projects/MIT Course/Logistic Regression/Songs/Songs.R', echo=TRUE)
source('~/Documents/DATA SCIENTIST/Projects/MIT Course/Logistic Regression/Songs/Songs.R', echo=TRUE)
source('~/Documents/DATA SCIENTIST/Projects/MIT Course/Logistic Regression/Songs/Songs.R', echo=TRUE)
source('~/Documents/DATA SCIENTIST/Projects/MIT Course/Logistic Regression/Songs/Songs.R', echo=TRUE)
source('~/Documents/DATA SCIENTIST/Projects/MIT Course/Logistic Regression/Songs/Songs.R', echo=TRUE)
source('~/Documents/DATA SCIENTIST/Projects/MIT Course/Logistic Regression/Songs/Songs.R', echo=TRUE)
source('~/Documents/DATA SCIENTIST/Projects/MIT Course/Logistic Regression/Songs/Songs.R', echo=TRUE)
source('~/Documents/DATA SCIENTIST/Projects/MIT Course/Logistic Regression/Songs/Songs.R', echo=TRUE)
source('~/Documents/DATA SCIENTIST/Projects/MIT Course/Logistic Regression/Songs/Songs.R', echo=TRUE)
