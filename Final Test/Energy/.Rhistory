mkdir ~/HelloWorld.md
## This is a markdown file
install.packages("swirl
install.packages("swirl")
install.packages("swirl")
library("swirl")
swirl()
library(swirl
library(swirl)
library(swirl)
swirl()
quit
library(swirl)
swirl()
swirl()
library(dplyr)
cran -> tbl()
view()
cran -> tbl_df(cran)
library(swirl)
swirl()
cran -> tbl_df(cran)
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
group_by(cran, package)
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
submit()
avg_bytes = mean(size) )
avg_bytes = mean(size))
submit()
count = n()
pack_sum <- summarize(by_package,
count = n() ,
unique = n_distinct(ip_id) ,
countries = n_distinct(country),
avg_bytes = mean(size))
submit()
reset()
swirl()
?n
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
pack_sum <- summarize(by_package,
count = n() ,
unique = n_distinct(ip_id) ,
countries = n_distinct(country) ,
avg_bytes = mean(size) )
submit()
library(swirl)
swirl()
submit()
submit()
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size))
submit()
# 1. count = n()
count()
count = n()
unique = n_distinct(ip_id)
submit()
submit()
sunmit()
submit()
submit()
library(swirl)
swirl()
submit()
library(dylyr)
library(dplyr)
submit()
pack_sum <- summarize(by_package,
submit()
pack_sum <- summarize(by_package,count = n() ,unique = n_distinct(ip_id) ,countries = n_distinct(country) ,avg_bytes = mean(size))
submit()
submit()
View(by_package)
submit()
submit()
library(swirl)
swirl()
swirl()
submit()
View(by_package)
reset()
swirl()
avg_bytes = mean(size))
avg_bytes = mean(size))
avg_bytes = mean(size)
pack_sum <- summarize(by_package,count = n(),unique = n_distinct(ip_id), countries = n_distinct(country),avg_bytes = mean(size))
View(pack_sum)
submit()
submit(pack_sum)
by_package <- group_by(cran, package)
avg_bytes = mean(size))
pack_sum <- summarize(by_package,count = n(),unique = n_distinct(ip_id), countries = n_distinct(country),avg_bytes = mean(size))
submit()
?summarize
View(pack_sum)
submit()
submit()
setwd("~/Documents/DATA SCIENTIST/Projects/The Analytics Edge/Final/Federal Fund Rate")
fedFunds = read.csv(federalFundsRate.csv, stringsAsFactors = False)
fedFunds = read.csv(federalFundsRate.csv, stringsAsFactors = FALSE)
fedFunds = read.csv("federalFundsRate.csv", stringsAsFactors = FALSE)
str(fedFunds)
table(fedFunds$RaisedFedFunds)
291/(291+294)
table(fedFunds$RaisedFedFunds, fedFunds$Chairman)
table(fedFunds$RaisedFedFunds, fedFunds$Chairman, mean)
library(caTools)
set.seed(201)
spl = sample.split(fedFunds$RaisedFedFunds,0.7)
training = subset(fedFunds, spl == T)
testing = subset(fedFunds, spl == F)
?glm
glm = glm(RaisedFedFunds ~ PreviousRate + Streak + Unemployment + HomeownershipRate + DemocraticPres + MonthsUnitElection, data = fedFunds, family = binomial)
glm = glm(RaisedFedFunds ~ PreviousRate + Streak + Unemployment + HomeownershipRate + DemocraticPres + MonthsUntilElection, data = fedFunds, family = binomial)
summary(glm)
plot(fedFunds$RaisedFedFunds, fedFunds$Streak)
plot(fedFunds$RaisedFedFunds, fedFunds$DemocraticPres)
glm = glm(RaisedFedFunds ~ PreviousRate + Streak + Unemployment + HomeownershipRate + DemocraticPres + MonthsUntilElection, data = training, family = binomial)
summary(glm)
pred = predict(glm, newdata = testing, type = "response")
table(testing$RaisedFedFunds, pred > 0.5)
60+57/(60+57+27+31))
60+57/(60+57+27+31)
library(ROCR)
ROCRpred = prediction(pred, testing$RaisedFedFunds)
ROCRperf = performance(ROCRpred, "tpr", "fpr")
plot(ROCRperf)
plot(ROCRperf, colorize=TRUE)
plot(ROCRperf, colorize=TRUE, print.cutoffs.at=seq(0,1,by=0.1), text.adj=c(-0.2,1.7))
library(caret)
library(e1071)
numFolds = trainControl(method = "cv", number =10)
cpGrid = expand.grid(.cp = seq(0.01,0.5,0.01))
>train
?train
train(RaisedFedFunds ~ PreviousRate + Streak + Unemployment + HomeownershipRate + DemocraticPres + MonthUntilElection, data = training, method = "glm", trControl = numFolds, tuneGrid = cpGrid)
train(RaisedFedFunds ~ PreviousRate + Streak + Unemployment + HomeownershipRate + DemocraticPres + MonthsUntilElection, data = training, method = "glm", trControl = numFolds, tuneGrid = cpGrid)
train(RaisedFedFunds ~ PreviousRate + Streak + Unemployment + HomeownershipRate + DemocraticPres + MonthsUntilElection, data = training, method = "rpart", trControl = numFolds, tuneGrid = cpGrid)
cpGrid = expand.grid(.cp = seq(0.02,0.5,0.02))
train(RaisedFedFunds ~ PreviousRate + Streak + Unemployment + HomeownershipRate + DemocraticPres + MonthsUntilElection, data = training, method = "rpart", trControl = numFolds, tuneGrid = cpGrid)
cpGrid = expand.grid(.cp = seq(0.001,0.01,0.001))
train(RaisedFedFunds ~ PreviousRate + Streak + Unemployment + HomeownershipRate + DemocraticPres + MonthsUntilElection, data = training, method = "rpart", trControl = numFolds, tuneGrid = cpGrid)
library(rpart)
library(rpart.plot)
Tree = rpart(RaisedFedFunds ~ PreviousRate + Streak + Unemployment + HomeownershipRate + DemocraticPres + MonthsUntilElection, data = training, method = "class", cp = 0.016)
plot(Tree)
prp(Tree)
pred1 = predict(Tree, newdata = testing, type = "class")
table(pred1, testing$RaisedFedFunds)
(64+48)/(64+48+40+23)
setwd("~/Documents/DATA SCIENTIST/Projects/The Analytics Edge/Final/Retail Cosumer")
HH = read.csv("Houseshold.csv")
HH = read.csv("Housesholds.csv")
HH = read.csv("Households.csv")
str(HH)
table(HH$MorningPct)
tapply(HH$MorningPct)
table(MorningPct)
HH = read.csv("Households.csv", asStringsFactor = FALSE)
HH = read.csv("Households.csv", asStringsFactors = FALSE)
HH = read.csv("Households.csv", stringsAsFactors = FALSE)
str(HH)
table(MorningPct)
table(HH$MorningPct)
count(HH$MorningPct)
?count
table(HH$MorningPct, count)
?subset
subset(HH, MorningPct)
subset(HH, MorningPct >= 100)
str(HH)
subset(HH, AfternoonPct >= 100)
str(HH)
subset(HH, AvgSalesValue > 150, AvgDiscount)
subset(HH, AvgDiscount > 25 , AvgSalesValue)
subset(HH, NumVisits > 300)
subset(HH, NumVisits > 300, count)
Visit = subset(HH, NumVisits > 300)
table(HH$NumVisits, HH$Visit)
147/2500
Visit = subset(HH, NumVisits >= 300)
148/2500
str(HH)
library(caret)
preproc = preProcess(HH)
?preProcess
HHNorm = predict(preproc, HH))
HHNorm = predict(preproc, HH)
str(HHNorm)
max(HHNorm$NumVisits)
min(HHNorm$AfternoonPct)
set.seed(200)
?dist
distances = dist(HHNorm, method = "euclidean")
?hclust
ClusterShoppers = hclust(distances, method = "ward.D")
plot(ClusterShoppers, labels = F)
set.seed(200)
?kmean
?kmeans
?kmeanskm = kmeans(HHNorm, centers = 10)
km = kmeans(HHNorm, centers = 10)
str(km)
table(km$clusters)
table(km$cluster)
HH1 = subset(HHNorm, ClusterShoppers == 1)
tapply(HHNorm, cluster ==1)
tapply(HHNorm, cluster = 1)
cluster1 = subset(HHNorm, km$cluster == 1)
summary(cluster1)
tapply(HHNorm$MorningPct, km, mean)
tapply(HHNorm$MorningPct, km$cluster, mean)
tapply(HHNorm$MorningPct, km$cluster)
tapply(HHNorm$MorningPct, km$cluster, mean)
tapply(HHNorm$MorningPct, cluster =1 , mean)
tapply(HHNorm$MorningPct, cluster ==1 , mean)
tapply(HHNorm$MorningPct, km$cluster =1 , mean)
tapply(HHNorm$MorningPct, km$cluster ==1 , mean)
clusters = km$cluster
data$cluster = clusters
data$cluster
clusters = km$cluster
clusters
table(clusters)
set.seed(5000)
km2 = kmeans(HHNorm, centers = 5)
clusters1 = km$cluster
table(clusters1)
clusters1 = km2$cluster
table(clusters1)
setwd("~/Documents/DATA SCIENTIST/Projects/The Analytics Edge/Final Test/Energy")
energy = read.csv("energy.csv")
str(energy)
?cor
cor(energy)
cor(energy$STATE, energy$GenTotal)
table(energy$STATE, energy$GenTotalRenewable)
str(energy)
table(energy$STATE, energy$GenTotalRenewable, mean)
energy = read.csv("energy.csv", stringsAsFactors = F)
str(energy)
table(energy$STATE, energy$GenTotalRenewable)
str(energy)
table(energy$GenTotalRenewable)
energy[max(energy$GenTotalRenewable),]
energy[energy$GenTotalRenewable == max(energy$GenTotalRenewable),]
str(energy)
table(energy$AllSourcesCO2, energy$presidential.results)
str(energy)
presidential = subset(energy, presidential.results == 0)
mean(presidential$AllSourcesCO2)
View(presidential)
View(presidential)
?mean
mean(presidential)
mean(presidential, na.rm = F)
tapply(energy$AllSourcesCO2, energy$presidential.results, mean)
str(energy)
table(mean(energy$AllSourcesCO2), energy$presidential.results)
tapply(mean(energy$AllSourcesCO2), energy$presidential.results)
summary(energy)
tapply(mean(energy$AllSourcesCO2), energy$presidential.results, na.rm = NA)
mean(presidential)
mean(presidential$AllSourcesCO2)
tapply(mean(energy$AllSourcesCO2), energy$presidential.results, na.rm = T)
table(mean(energy$AllSourcesCO2), energy$presidential.results, na.rm = T)
?as.factor
presidential.results = as.factor(energy$presidential.results)
tapply(mean(energy$AllSourcesCO2), energy$presidential.results, na.rm = T)
?tapply
tapply(energy$AllSourcesCO2, energy$presidential.results, mean, na.rm = T)
?tapply
cor(energy$AllSourcesCO2, energy$EsalesIndustrial, use = "complete")
cor(energy$AllSourcesSO2, energy$EsalesIndustrial, use = "complete")
cor(energy$AllSourcesNOx, energy$EsalesIndustrial, use = "complete")
?boxplot
boxplot(energyEpriceTotal, energy$STATE)
boxplot(energy$EpriceTotal, energy$STATE)
boxplot(energy$EpriceTotal, energy$STATE, na.rm = T)
boxplot(energy$EPriceTotal, energy$STATE, na.rm = T)
boxplot(energy$EPriceTotal)
tapply(energy$EPriceTotal, energy$STATE, min)
sapply(energy$EPriceTotal, energy$STATE, min)
sapply(energy$EPriceTotal, energy$STATE, min)
tapply(energy$EPriceTotal, energy$STATE)
table(energy$EPriceTotal, energy$STATE, min)
tapply(energy$GenTotal, energy$STATE, max)
set.seed(144)
spl = sample(1:nrow(energy), size = 0.7*nrow(energy))
train = energy[spl,]
test = energy[-spl,]
?glm
mod = glm(GenSolarBinary ~ GenHydro + GenSolar + CumlFinancial + CumlRegulatory + Total.salary + Import, data = train, family = "binomial")
summary(mod)
pred = predict(mod, newdata = test, type = "response")
table(test$GenSolarBinary, pred > 0.5)
154+18/(154+7+18+31)
(154+18)/(154+7+18+31)
train.limited = train[,c('CumlRegulatory', 'CumlFinancial', 'presidential.results', 'Total.salary', 'Import')]
test.limited = test[,c('CumlRegulatory', 'CumlFinancial', 'presidential.results', 'Total.salary', 'Import')]
preproc = preProcess(train.limited)
train.norm = predict(preproc, train)
test.norm = predict(preproc, test)
set.seed = 144
km = kmeans(train.norm, centers = 2, iter.max = 1000)
km <- kmeans(train.norm, centers=2, iter.max=1000)
km = kmeans(train.norm, centers = 2, iter.max = 1000, na.rm = T)
km = kmeans(train.norm, centers = 2, iter.max = 1000)
preproc = preProcess(test.limited)
preproc1 = preProcess(test.limited)
test.norm = predict(preproc1,test)
set.seed = 144
km = kmeans(train.norm, centers = 2, iter.max = 1000)
summary(train.norm)
train.norm = predict(preproc, train.limited)
preproc1 = preProcess(test.limited)
test.norm = predict(preproc1,test.limited)
set.seed = 144
km = kmeans(train.norm, centers = 2, iter.max = 1000)
library(flexclust)
install.packages("flexclust")
install.packages("flexclust")
library(flexclust)
km.kcca = as.kcca(km, train.norm)
cluster.train = predict(km.kcca)
clusters = km$cluster
table(clusters)
table(cluster.train)
train1 = subset(train.norm, cluster.train ==1)
train2 = subset(train.norm, cluster.train ==2)
summary(train1)
table(train1$presidential.results)
str(train1)
summary(train1)
summary(train2)
mod1 = glm(GenSolarBinary ~ GenHydro + GenSolar + CumlFinancial + CumlRegulatory + Total.salary + Import, data = train1, family = "binomial")
