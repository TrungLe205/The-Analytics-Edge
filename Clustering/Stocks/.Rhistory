mkdir ~/HelloWorld.md
## This is a markdown file
install.packages("swirl
install.packages("swirl")
install.packages("swirl")
library("swirl")
swirl()
setwd("~/Documents/DATA SCIENTIST/Projects/MIT Course/Clustering/DailyKos")
dailyKos = read.csv("dailykos.csv")
dist = dust(dailyKow, method = "euclidean")
dist = dist(dailyKow, method = "euclidean")
(dailyKos, method = "euclidean")
dist = dist(dailyKos, method = "euclidean")
clusterDailyKos = hclust(dist, method = "ward.D")
plot(clusterDailyKos)
clusterGroups = cutree(clusterDailyKos, k = 7)
cluster1 = subset(dailyKos, clusters ==1)
cluster2 = subset(dailyKos, clusters==2)
cluster3 = subset(dailyKos, clusters==3)
cluster4 = subset(dailyKos, clusters==4)
cluster5 = subset(dailyKos, clusters==5)
cluster6 = subset(dailyKos, clusters==6)
cluster7 = subset(dailyKos, clusters ==7)
str(cluster1)
cluster1 = subset(dailyKos, clusters ==1)
cluster1 = subset(dailyKos, clusterGroups ==1)
cluster2 = subset(dailyKos, clustersGroups==2)
cluster3 = subset(dailyKos, clustersGroups==3)
cluster4 = subset(dailyKos, clustersGroups==4)
cluster5 = subset(dailyKos, clustersGroups==5)
cluster6 = subset(dailyKos, clustersGroups==6)
cluster7 = subset(dailyKos, clustersGroups ==7)
str(cluster1)
str(clusterGroups)
summary(clusterGroups)
tail(sort(colMeans(cluster1)))
tail(sort(colMeans(cluster2)))
tail(sort(colMeans(cluster1)))
tail(sort(colMeans(cluster2)))
clusterGroups = cutree(clusterDailyKos, k = 7)
cluster1 = subset(dailyKos, clusterGroups ==1)
cluster2 = subset(dailyKos, clusterGroups==2)
cluster3 = subset(dailyKos, clusterGroups==3)
cluster4 = subset(dailyKos, clusterGroups==4)
cluster5 = subset(dailyKos, clusterGroups==5)
cluster6 = subset(dailyKos, clusterGroups==6)
cluster7 = subset(dailyKos, clusterGroups ==7)
str(cluster1)
# The most frequently words appear in each cluster
tail(sort(colMeans(cluster1)))
tail(sort(colMeans(cluster2)))
set.seed(1)
kmeansClustering = kmeans(dailyKos, 7)
str(kmeansClustering)
table(kmeansClustering$cluster)
kcluster1 = subset(dailyKos, kmeansClustering$cluster == 1)
kcluster2 = subset(dailyKos, kmeansClustering$cluster == 2)
kcluster3 = subset(dailyKos, kmeansClustering$cluster == 3)
kcluster4 = subset(dailyKos, kmeansClustering$cluster == 4)
kcluster5 = subset(dailyKos, kmeansClustering$cluster == 5)
kcluster6 = subset(dailyKos, kmeansClustering$cluster == 6)
kcluster7 = subset(dailyKos, kmeansClustering$cluster == 7)
str(kcluster7)
mean(kcluster7)
?tail
colMeans(kcluster7)
sort(colMeans(kcluster7))
tail(sort(colMeans(kcluster7)))
head(sort(colMeans(kcluster7)))
max(colMeans(kcluster7)))
MAX(colMeans(kcluster7)))
?max
?colMeans
tail(sort(Means(kcluster7)))
?means
?Means
?Mean
?mean
tail(sort(mean(kcluster7)))
tail(sort(colMeans(kcluster1)))
tail(sort(colMeans(kcluster2)))
tail(sort(colMeans(kcluster3)))
tail(sort(colMeans(kcluster4)))
tail(sort(colMeans(kcluster5)))
tail(sort(colMeans(kcluster6)))
tail(sort(colMeans(kcluster7)))
setwd("~/Documents/DATA SCIENTIST/Projects/MIT Course/Clustering/Airlines")
airlines = read.csv("AirlinesCluster.csv")
summary(airlines)
library(caret)
preproc = preProcess(airlines)
airlinesNorm = predict(preproc, airlines)
summary(airlinesNorm)
distances = dist(airlinesNorm, method = "euclidean")
clusterAirlines = hclust(distances, method = "ward.D")
distances = dist(airlinesNorm, method = "euclidean")
plot(clusterAirlines)
clusterGroup = cutree(clusterAirlines, k=5)
clusterGroup = cutree(clusterAirlines, k=5)
cluster1 = subset(airlinesNorm, clusterGroup ==1)
cluster2 = subset(airlinesNorm, clusterGroup ==2)
cluster3 = subset(airlinesNorm, clusterGroup ==3)
cluster4 = subset(airlinesNorm, clusterGroup ==4)
cluster5 = subset(airlinesNorm, clusterGroup ==5)
colMeans(cluster1)
colMeans(cluster2)
colMeans(cluster3)
dim(cluster1)[1]
?dim
airVec = c(tapply(airlines$Balance, clusterGroups, mean), tapply(airlines$QualMiles,
clusterGroups, mean), tapply(airlines$BonusMiles, clusterGroups, mean),
tapply(airlines$BonusTrans, clusterGroups, mean), tapply(airlines$FlightMiles,
clusterGroups, mean), tapply(airlines$FlightTrans, clusterGroups, mean),
tapply(airlines$DaysSinceEnroll, clusterGroups, mean))
dim(airVec) = c(5, 7)
colnames(airVec) = c("Balance", "QualMiles", "BonusMiles", "BonusTrans", "FlightMiles",
"FlightTrans", "DaysEnroll")
airVec
airVec = c(tapply(airlines$Balance, clusterGroups, mean), tapply(airlines$QualMiles,clusterGroups, mean),tapply(airlines$BonusMiles, clusterGroups, mean), tapply(airlines$BonusTrans, clusterGroups, mean), tapply(airlines$FlightMiles,clusterGroups, mean), tapply(airlines$FlightTrans, clusterGroups, mean),tapply(airlines$DaysSinceEnroll, clusterGroups, mean))
nrow(airline$Balance)
nrow(airlines$Balance)
nrow(airlines$qualMiles)
airVec = c(tapply(airlines$Balance, clusterGroup, mean), tapply(airlines$QualMiles,clusterGroup, mean),tapply(airlines$BonusMiles, clusterGroup, mean), tapply(airlines$BonusTrans, clusterGroup, mean), tapply(airlines$FlightMiles,clusterGroup, mean), tapply(airlines$FlightTrans, clusterGroup, mean),tapply(airlines$DaysSinceEnroll, clusterGroup, mean))
dim(airvec) = c(5,7)
dim(airVec) = c(5,7)
colnames(airVec) = c("Balance", "QualMiles", "BonusMiles", "BonusTrans", "FlightMiles", "FlightTrans", "DaysEnroll")
airVec
setwd("~/Documents/DATA SCIENTIST/Projects/MIT Course/Clustering/Stocks")
stocks = read.csv("StocksCluster.csv")
str(stocks)
?max
max(stocks$ReturnJan)
table(stocks)
table(stocks$ReturnJan)
table(stocks$ReturnJan, max)
tapply(stocks$ReturnJan, mac)
tapply(stocks$ReturnJan, max)
table(stocks$PositiveDec)
6324/(5256+6324)
cor(stocks)
set.seed(144)
split = sample.split(stocks, SplitRatio = 0.7)
train = subset(stocks, split == T)
test = subset(stocks, split == F)
library(caTools)
set.seed(144)
split = sample.split(stocks, SplitRatio = 0.7)
train = subset(stocks, split == T)
test = subset(stocks, split == F)
modelLog = glm(Positive ~., data = train, family = binomial)
modelLog = glm(PositiveDec ~., data = train, family = binomial)
summary(modelLog)
pred = predict(modelLog, newdata = test, type = "response")
table(test$PositiveDec, pred > 0.5)
(477+1719)/(477+1282+382+1719)
table(test$PositiveDec)
2101/(1759+2101)
limitedTrain = train
limitedTrain$PositiveDec = NULL
limitedTest = test
limitedTest$Positive = NULL
limitedTrain = train
limitedTrain$PositiveDec = NULL
limitedTest = test
limitedTest$PositiveDec = NULL
library(caret)
preproc = preProcess(limitedTrain)
normTrain = predict(preproc, limitedTrain)
normTest = predict(preproc, limitedTest)
summary(normTrain)
mean(normTrain$ReturnJan)
set.seed(144)
km = kmeans(normTrain, centers = 3)
table(km$cluster)
install.packages("flexclust")
library(flexclust)
km.kcca = as.kcca(km, normTrain)
clusterTrain = predict(km.kcca)
clusterTest = predict(km.kcca, newdata = normTest)
summary(clusterTest))
summary(clusterTest)
str(clusterTest)
table(clusterTest$cluster)
table(clusterTest)
stockTrain1 = subset(train, clusterTrain ==1)
stockTrain2 = subset(train, clusterTrain ==2)
stockTrain3 = subset(train, clusterTrain ==3)
stockTest1 = subset(test, clusterTest ==1)
stockTest2 = subset(test, clusterTest ==2)
stockTest3 = subset(test, clusterTest ==3)
mean(stockTrain1$PositiveDec)
mean(stockTrain2$PositiveDec)
mean(stockTrain3$PositiveDec)
stockModel1 = glm(PositiveDec ~., data = stockTrain1, family = binomial)
stockModel1 = glm(PositiveDec ~., data = stockTrain1, family = binomial)
stockModel2 = glm(PositiveDec ~., data = stockTrain2, family = binomial)
stockModel3 = glm(PositiveDec ~., data = stockTrain3, family = binomial)
summary(stockModel1)
predModel1 = predict(stockModel1, newdata = stockTest1, type = "response")
predModel2 = predict(stockModel2, newdata = stockTest2, type = "response")
predModel3 = predict(stockModel3, newdata = stockTest3, type = "response")
table(stockTest1$PositiveDec, predModel1 > 0.5)
(predModel1 = predict(stockModel1, newdata = stockTest1, type = "response")
predModel1 = predict(stockModel1, newdata = stockTest1, type = "response")
predModel2 = predict(stockModel2, newdata = stockTest2, type = "response")
predModel2 = predict(stockModel2, newdata = stockTest2, type = "response")
predModel2 = predict(stockModel2, newdata = stockTest2, type = "response")
predModel3 = predict(stockModel3, newdata = stockTest3, type = "response")
(49+656)/(49+656+46+396)
table(stockTest2$PositiveDec, predModel2 > 0.5)
(323+893)/(323+893+754+263)
table(stockTest3$PositiveDec, predModel3 > 0.5)
(139+149)/(139+149+98+94)
AllPredictions = c(PredModel1, predModel2, predModel3)
AllOutcomes = c(stockTest1$PositiveDec, stockTest2$PositiveDec, stockTest3$PositiveDec)
AllPredictions = c(predModel1, predModel2, predModel3)
AllOutcomes = c(stockTest1$PositiveDec, stockTest2$PositiveDec, stockTest3$PositiveDec)
table(AllOutcomes, AllPredictions > 0.5)
(511+1698)/(511+1248+1698+403)
(477+1719)/(477+1282+382+1719)
