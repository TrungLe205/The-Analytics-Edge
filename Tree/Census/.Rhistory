mkdir ~/HelloWorld.md
## This is a markdown file
install.packages("swirl
install.packages("swirl")
install.packages("swirl")
library("swirl")
swirl()
setwd("~/Documents/DATA SCIENTIST/Projects/MIT Course/Tree/Letters")
source('~/Letters.R', echo=TRUE)
source('~/Letters.R', echo=TRUE)
source('~/Letters.R', echo=TRUE)
source('~/Letters.R', echo=TRUE)
source('~/Letters.R', echo=TRUE)
source('~/Letters.R', echo=TRUE)
source('~/Letters.R', echo=TRUE)
source('~/Letters.R', echo=TRUE)
source('~/Letters.R', echo=TRUE)
install.packages("arm")
library(arm)
modelLog = bayesglm(isB ~. - letter, data = train, family = "binomial")
summary(modelLog)
source('~/Letters.R', echo=TRUE)
install.packages("arm")
pred = predict(modelLog, newdata = test, type = "response")
summary(pred)
# Confusing matrix with threshold of 0.5
table(test$isB, pred > 0.5)
(1146+335)/(1146+335+36+42)))
(1146+335)/(1146+335+36+42)
377/(1182+377)
library(ROCR)
ROCRpred = prediction(pred, test$isB)
ROCRperf = performance ( ROCRpred, "tpr", "fpr")
plot(ROCRperf)
library(rpart)
install.packages("rpart")
install.packages("rpart")
intsall.packages("rpart.plot")
install.packages("rpart.plot")
library(rpart)
library(rpart.plot)
tree = rpart(isB ~., - letter, data = train, method = "class")
tree = rpart(isB ~., - letter, data = train, method = "class")
treeModel <- rpart(isB ~. - letter, data=train, method="class")
tree = rpart(isB ~. - letter, data = train, method = "class")
prp(tree)
predTree = predict(tree, newdata = test, type = "class")
table(predTree, test$isB)
(1134+317)/(1134+69+48+317)
install.packages("randomForest")
library(randomForest)
randomForest = randomForest(isB ~. - letter, data = train)
summary(randomForest)
predRF = predict(randomForest, newdata = test)
table(predRF, test$isB)
(1168+359)/(1168+18+14+359)
predRF = predict(randomForest, newdata = test, ntree = 200)
randomForest = randomForest(isB ~. - letter, data = train, ntree = 200)
predRF = predict(randomForest, newdata = test)
table(predRF, test$isB)
(1169+362)/(1169+15+13+362)
install.packages("caret")
library(caret)
install.packages("e1071")
library(e1071)
numFolds = trainControl(method = "cv", number = 10)
cpGrid = expand.grid( .cp =seq(0.01,0.5,0.01))
train(isB ~. - letter, data = train, method = "rpart", trControl = numFolds, tuneGrid = cpGrid)
treeModel = rpart(isB ~. - letter, data = train, method ="class", cp = 0.01)
predModel = predict(treeModel, newdata = test, type = "class")
table(test$isB, predModel)
(1134+317)/(1134+48+60+317)
setwd("~/Documents/DATA SCIENTIST/Projects/MIT Course/Tree/Census")
census = read.csv("census.csv")
str(census)
source('~/Documents/DATA SCIENTIST/Projects/MIT Course/Tree/Census/Census.R', echo=TRUE)
install.packages("polycor")
library(polycor)
hec(census$age, census$over50k)
hetcor(census$age, census$over50k)
census$age = as.factor(census$age)
cor(census$age, census$over50k)
census$age = as.numeric(census$age)
census$over50k = as.numeric(census$over50k)
cor(census$age, census$over50k)
str(census)
census$over50k = as.factor(census$over50k)
source('~/Documents/DATA SCIENTIST/Projects/MIT Course/Tree/Census/Census.R', echo=TRUE)
library(arm)
modelLog1 = bayesglm(over50k~., data = train, family = "binomial")
source('~/Documents/DATA SCIENTIST/Projects/MIT Course/Tree/Census/Census.R', echo=TRUE)
modelLog1 = bayesglm(over50k~., data = train, family = "binomial")
summary(modelLog1)
source('~/Documents/DATA SCIENTIST/Projects/MIT Course/Tree/Census/Census.R', echo=TRUE)
source('~/Documents/DATA SCIENTIST/Projects/MIT Course/Tree/Census/Census.R', echo=TRUE)
table(test$over50k)
9713/(9713+3078)
ROCRpred = prediction(test$over50k, pred)
as.numeric(performance(ROCRpred, "auc")@y.values)
ROCRpred = prediction(pred, test$over50k)
as.numeric(performance(ROCRpred, "auc")@y.values)
CARTmodel = rpart(over50k ~., data = train, method = "class")
prp(CARTmodel)
table(test$over50k, predCART > 0.5)
predCART = predict(CARTmodel, newdata = test, type = "class")
table(test$over50k, predCART > 0.5)
table(test$over50k, predCART)
(9243+1596)/(9243+470+1482+1596)
library(randomForest)
set.seed(1)
trainSmall = train[sample(nrow(train),2000),]
censusRF = randomForest(over50k ~., data = trainSmall)
predRF = predict(censusRF, newdata = test)
table(test$over50k, predRF > 0.5)
table(test$over50k, predRF)
library(rpart)
(9614+1050)/(9614+1050+99+2028)
vu = varUsed(censusRF, count = TRUE)
vusorted = sort(vu, decreasing = FALSE, index.return = TRUE)
dotchart(vusorted$x, names(censusRF$forest$xlevels[vusorted$iX]))
numFolds = trainControl(method ="cv", number =10)
cpGrid = expand.grid( .cp = seq(0.01,0.5,0.01))
train(over50k ~., data = train, method ="rpart", trControl = numFolds, tuneGrid = cpGrid)
numFolds = trainControl(method ="cv", number =10)
cpGrid = expand.grid( .cp = seq(0.002,0.1,0.0002))
train(over50k ~., data = train, method ="rpart", trControl = numFolds, tuneGrid = cpGrid)
censusCV = rpart(over50k ~., data = train, method = "class", cp = 0.0028)
predictCV = predict(censusCV, newdata = test, type = "class")
table(test$over50k, predictCV)
(9181+1837)/(9181+1837+1241+532)
prp(censusCV)
